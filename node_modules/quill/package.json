{
  "author": "",
  "name": "quill",
  "description": "A realtime git backed blogging engine for node.js",
  "version": "0.1.5-1",
  "homepage": "http://justquillin.com/",
  "repository": {
    "type": "git",
    "url": "git@github.com:theycallmeswift/quill.git"
  },
  "bin": {
    "quill": "./bin/quill"
  },
  "engines": {
    "node": "~0.6.9"
  },
  "dependencies": {
    "colors": "0.6.0-1",
    "handlebars": "1.0.5beta",
    "marked": "0.2.3",
    "node-static": "0.5.9",
    "socket.io": "0.9.2",
    "underscore": "1.3.1",
    "wrench": "1.3.7",
    "consolidate": "0.1.0",
    "whiskers": "0.1.5"
  },
  "devDependencies": {},
  "domains": [
    "justquillin.com",
    "www.justquillin.com"
  ],
  "subdomain": "quill",
  "scripts": {
    "start": "quill.js"
  },
  "readme": "# Quill\n\nQuill is a simple blog engine inspired by\n[Jekyll](https://github.com/mojombo/jekyll). Quill runs on\n[node](http://nodejs.org/) and has\nan easy command line interface. Themeing is as simple as editing a single html page.\n\n## Installing & Deployment\n\nYou can install Quill using the npm package manager.  Just type:\n\n    npm install quill -g\n\nNow, we have access to the quill command.  We can start a new blog by typing:\n\n    quill new my_new_blog\n\nThis will create a new folder in the specified path where our blog will live.\nLets start by making a post.\n\n    cd my_new_blog\n    quill post \"My First Post\"\n\nThis will create a post file in the `posts/` directory which is prefixed by the\ncurrent timestamp.  All post files are written in\n[Markdown](http://daringfireball.net/projects/markdown/syntax) and will\ncompile to static HTML.\n\nTo deploy the site we are going to use \n[Nodejitsu](http://nodejitsu.com/).  Instructions on setting up their\ncommandline tool Jitsu can be found\n[here](https://github.com/nodejitsu/jitsu).  Once you have jitsu set up it is\nas simple as typing:\n\n    jitsu deploy\n\n### Local development\n\nIf you want to edit your themes locally, you can run the quill server by\ntyping:\n\n    npm install\n    node quill\n\nNow you can navigate to `http://localhost:8000` and see your blog while you\nedit it.  __Note__: You have to restart the server when you make changes to\nsee them.\n\n# Config.json\n\nWe configure Quill with [config.json](https://github.com/theycallmeswift/quill/blob/master/config.json).\n\n    {\n      \"development\": true,\n      \"theme\": \"bootstrap\",\n      \"name\": \"Quill\",\n      \"description\": \"Blogging for Hackers.\",\n      \"blogroll\": [\n        {\n          \"title\": \"Download Quill\",\n          \"url\": \"https://github.com/theycallmeswift/quill\",\n          \"description\": \"Get the quill server\"\n        },\n        {\n          \"title\": \"Official Docs\",\n          \"url\": \"https://github.com/theycallmeswift/quill\",\n          \"description\": \"The official documentation\"\n        },\n        {\n          \"title\": \"Follow us on Twitter\",\n          \"url\": \"http://twitter.com/justquillin\",\n          \"description\": \"Follow @justquillin on Twitter\"\n        }\n      ]\n    }\n\nHere it is line by line:\n\n## Development Flag\n\n    \"development\": true,                   \n\nYou won't care about this unless you're helping to build Quill (please do!). \n      \n## Theme\n\n    \"theme\": \"barebones\",\n\nWhat directory the theme is stored in.  ```/themes/[config.theme]/index.html```. Every variable from config.json is passed to the theme. Look at the next section to see how the blog name and description appear.\n\nThere are four example themes in this repository, included the theme found at http://justquillin.com.\n\n## Name and Description\n\nThe name of the blog and a short blub about it.\n\n    \"name\": \"Quill\",\n    \"description\": \"Blogging for Hackers.\",\n\nIn the ***barebones theme*** we render the name and description in an hgroup: \n\n    <hgroup>\n    \t{{#if config.name}}\n    \t\t<h1 id=\"blog-title\">{{ config.name }}}</h1>\n    \t{{/if}}\n    \t{{#if config.description}}\n    \t\t<h2 id=\"blog-description\">{{ config.description }}}<h2>\n    \t{{/if}}\n    </hgroup>\n      \n## Blogroll\n\nThe blogroll is an array of objects. These links are also rendered in the template.\n\n    \"blogroll\": [\n        {\n          \"title\": \"Download Quill\",\n          \"url\": \"https://github.com/theycallmeswift/quill\",\n          \"description\": \"Get the quill server\"\n        },\n        {\n          \"title\": \"Official Docs\",\n          \"url\": \"https://github.com/theycallmeswift/quill\",\n          \"description\": \"The official documentation\"\n        },\n        {\n          \"title\": \"Follow us on Twitter\",\n          \"url\": \"http://twitter.com/justquillin\",\n          \"description\": \"Follow @justquillin on Twitter\"\n        }\n    ]\n    \nHere's an example of how the ***barebones theme*** renders the blogroll:\n\n\n    {{ #each config.blogroll }}\n    \t<li><a href=\"{{ url }}\" title=\"{{ description }}\">{{ title }}</a></li>\n    {{ /each }}\n    \n    \n# Blog Posts\n\nBlog posts are transformed from markdown into templates. Blog posts start as markdown files in /posts and then get passed to our template (as specified in the config).\n\nThese markdown posts are just like the blogroll found in config. Here's an example of how they're styled in the ***barebones theme***:\n\n    {{#posts}}\n    \t<li>\n    \t\t<h3 class=\"title\">{{{ title }}} <small>{{{ timestamp }}}</small></h3>\n    \t\t{{{ body }}}\n    \t</li>\n    {{/posts}}\n    \nThe ```{{{ body }}}``` variable outputs compiled markdown. This markdown is wrapped in a ```<div/>``` with a class of ```_post``` and a unique ```id```.\n\n    <div class=\"_post\" id=\"1332691107\">[compiled markdown (html)]</div>\n\nRemember that newlines in markdown get ```p``` wrappers.\n\n# Realtime!\n\nIt wouldn't be node if it wasn't realtime. The crowd-pleaser for the hackny hackathon, we integrated a realtime notification system for new blog posts.\n\nThis is added as a bonus variable for templates. Include it at the end of your template, right before the ```</body>``` tag.\n\n    {{{ realtime }}}\n\nWhen you publish a new blog post (by deploying the server), all of the connected clients will be notified in realtime. The notification is appended to the body of the document [with javascript](https://github.com/theycallmeswift/quill/blob/master/quill/scaffolding/realtime.js).\n\nThis code gets added to the page whenever a new post is made. It will not exist on the page before this. To test, you can copy and paste the following before the ```</body>``` tag.\n\n    <a href=\"javascript:location.reload(true)\" id=\"new-post-notice\">A new post has been made! <br /><small>Click here to see it.</small></a>\n\n# Assets\n\nThrow all your static assets (like images or javascript) into the ```/assets``` folder within the template directory. You can reference these files in your template like this:\n\n    <img src=\"/assets/favicon.png\" />\n\n# Bonus Structure.css\n\nIf you want an easy way to render markdown, check out *structure.css*, bundled into the four provided themes within the ```/assets``` directory. Based off the [rawr framwork](http://getrawr.com).",
  "readmeFilename": "README.md",
  "_id": "quill@0.1.5-1",
  "_from": "quill"
}
